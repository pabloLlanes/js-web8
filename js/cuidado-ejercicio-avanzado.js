/* ENUNCIADO
Van a programar un mini-juego de batalla por turnos en el que dos personajes (jugadores) se enfrenten hasta que alguno quede sin puntos de vida (HP). El enfoque debe ser sencillo y did√°ctico, pero demostrar√° el uso de objetos, funciones, callbacks y un bucle para manejar los turnos.


Representar cada jugador como un objeto con propiedades b√°sicas (por ejemplo: nombre, hp, ataque).
Manejar y acceder a esas propiedades.
Funciones y callbacks

Usar funciones para realizar la l√≥gica de ataque, mostrar estado, etc.
Permitir (al menos en teor√≠a) usar callbacks para definir c√≥mo se calcula el da√±o.
Bucle por turnos

Utilizar un bucle (while, por ejemplo) que se repita mientras ambos jugadores tengan vida.
Alternar los ataques: primero un jugador y luego el otro.
Salida en consola

Mostrar mensajes de lo que sucede en cada turno (qui√©n ataca, cu√°nto da√±o hace, etc.).
Al final, indicar qui√©n gana o si hay un empate.
REQUISITOS M√çNIMOS
Objetos ‚Äújugador1‚Äù y ‚Äújugador2‚Äù

Cada uno con propiedades:
name (string),
hp (n√∫mero) para los puntos de vida,
attack (n√∫mero) para determinar el da√±o b√°sico que causan.
(Puedes agregar m√°s propiedades si quieres, como defensa, pero no es obligatorio).
Funciones b√°sicas

Una funci√≥n para mostrar el estado de un jugador, por ejemplo, showStatus(player), que imprima en consola "Nombre tiene X puntos de vida.".
Una funci√≥n para calcular o aplicar el da√±o.
Esta funci√≥n puede ser un callback, p. ej.:
js
Copy code
function simpleDamage(attacker, defender) {
  return attacker.attack;
}
Otra funci√≥n (ej. doAttack(attacker, defender, damageCallback)) que use ese callback, reste puntos de vida al defensor y muestre mensajes en consola.
Una funci√≥n que orqueste la batalla (startBattle(p1, p2, damageCallback)), con un bucle que se repite mientras ambos jugadores tengan hp > 0.
En cada ronda:
Ataca primero el p1,
Si el otro (p2) sigue con vida, ataca p2.
Cuando uno (o ambos) lleguen a 0 de vida o menos, termina el bucle.
Se muestra qui√©n gan√≥ o si hubo empate (caso extremo: ambos llegan a 0 en el mismo turno).
Mensajes en consola

En cada ataque, debe imprimirse algo como:
"Guerrero ataca a Hechicero y causa 3 de da√±o."
Al terminar, debe imprimirse:
"¬°Guerrero gana con 2 puntos de vida restantes!"
(o el equivalente para un empate).
PASOS PROPUESTOS
(Puedes seguir estos pasos de manera orientativa)

Declarar los objetos de los jugadores

js
Copy code
const player1 = { name: "Guerrero", hp: 10, attack: 3 };
const player2 = { name: "Hechicero", hp: 8, attack: 4 };
Crear la funci√≥n showStatus(player)

js
Copy code
function showStatus(player) {
  console.log(`${player.name} tiene ${player.hp} puntos de vida.`);
}
Crear el callback de da√±o (opcional)

Por ejemplo, que devuelva directamente attacker.attack.
Crear la funci√≥n doAttack(attacker, defender, damageCallback)

Calcular el da√±o con la callback.
Restar ese da√±o al hp del defensor.
Imprimir un mensaje de ataque y luego llamar a showStatus(defender).
Crear la funci√≥n startBattle(p1, p2, damageCallback)

Usar un while (p1.hp > 0 && p2.hp > 0) {...}
Dentro, un turno para cada jugador en orden.
Cuando alguno llegue a hp <= 0, salir del bucle y mostrar el ganador.
Probarlo

Mostrar al inicio el estado de cada jugador.
Llamar a startBattle(player1, player2, simpleDamage);
Observar la salida en consola.
AYUDAS Y SUGERENCIAS
Uso de callbacks

Si lo ves complicado, puedes directamente calcular el da√±o en la misma funci√≥n doAttack y no usar callback. Pero si te animas, un callback te permitir√° en el futuro cambiar la l√≥gica de da√±o con facilidad (por ejemplo, uno que incluya defensa, ataques cr√≠ticos, etc.).
Desglosa el problema

Primero comprueba que se muestre bien el HP de cada jugador antes de la batalla.
Luego, agrega el bucle while y verifica que se salga cuando corresponde.
Finalmente, imprime el resultado.
Empates

 */


// 5Ô∏è‚É£ EJERCICIOS PR√ÅCTICOS
// ------------------------------------------------------------

// üèÜ EJERCICIO 1: Mostrar en tiempo real la tecla que el usuario presiona en un input
const inputTeclas = document.getElementById("inputTeclas");
const resultadoTecla = document.getElementById("resultadoTecla");
if (inputTeclas && resultadoTecla) {
  inputTeclas.addEventListener("keyup", function (e) {
    resultadoTecla.innerText = `√öltima tecla presionada: ${e.key}`;
  });
}

// üèÜ EJERCICIO 2: Cambiar el color de un div al pasar el mouse
const cajaColor = document.getElementById("cajaColor");
if (cajaColor) {
  cajaColor.addEventListener("mouseover", function () {
    cajaColor.style.backgroundColor = "lightblue";
  });
  cajaColor.addEventListener("mouseout", function () {
    cajaColor.style.backgroundColor = "";
  });
}

// üèÜ EJERCICIO 3: Capturar el env√≠o de un formulario y mostrar los datos
const formEjemplo = document.getElementById("formEjemplo");
if (formEjemplo) {
  formEjemplo.addEventListener("submit", function (e) {
    e.preventDefault();
    const nombre = formEjemplo.elements["nombre"].value;
    const email = formEjemplo.elements["email"].value;
    alert(`Datos capturados:\nNombre: ${nombre}\nEmail: ${email}`);
  });
}

// üèÜ EJERCICIO 4: Agregar elementos a una lista al hacer click en un bot√≥n
const btnAgregarItem = document.getElementById("btnAgregarItem");
const listaElementos = document.getElementById("listaElementos");
if (btnAgregarItem && listaElementos) {
  btnAgregarItem.addEventListener("click", function () {
    const nuevoItem = document.createElement("li");
    nuevoItem.innerText = "Nuevo √≠tem agregado";
    listaElementos.appendChild(nuevoItem);
  });
}

// üèÜ EJERCICIO 5: Checkbox - Mostrar mensaje cuando se acepte t√©rminos
const checkTerminos = document.getElementById("checkTerminos");
const msjTerminos = document.getElementById("msjTerminos");
if (checkTerminos && msjTerminos) {
  checkTerminos.addEventListener("change", function () {
    msjTerminos.innerText = checkTerminos.checked ? "¬°Has aceptado los t√©rminos!" : "A√∫n no aceptas los t√©rminos.";
  });
}

// üèÜ EJERCICIO 6: Detectar doble clic en un bot√≥n y cambiar su color
const btnDobleClick = document.getElementById("btnDobleClick");
if (btnDobleClick) {
  btnDobleClick.addEventListener("dblclick", function () {
    btnDobleClick.style.backgroundColor = "red";
    alert("¬°Hiciste doble clic!");
  });
}

// üèÜ EJERCICIO 7: Detectar la carga de un formulario y mostrar mensaje
window.addEventListener("load", function () {
  console.log("La p√°gina se ha cargado completamente.");
  alert("Bienvenido, la p√°gina est√° lista para usarse.");
});



// 1Ô∏è‚É£ Esperamos a que el DOM est√© completamente cargado antes de ejecutar el script
document.addEventListener("DOMContentLoaded", function () {
  // Insertamos el header y el footer autom√°ticamente en la p√°gina
  insertarHeader();
  insertarFooter();
  agregarEventosDeNavegacion();
});

// 2Ô∏è‚É£ Funci√≥n para insertar el HEADER en la p√°gina
function insertarHeader() {
  let header = document.createElement("header"); // Creamos el elemento <header>

  // Aplicamos estilos al header
  header.style.background = "#333";
  header.style.color = "white";
  header.style.padding = "10px";
  header.style.textAlign = "center";

  // Agregamos el contenido HTML del header
  header.innerHTML = `
        <h1>Mi Sitio Web</h1>
        <nav>
            <button id="btnInicio">Inicio</button>
            <button id="btnPagina2">P√°gina 2</button>
            <button id="btnPagina3">P√°gina 3</button>
        </nav>
    `;

  // Insertamos el header al principio del <body>
  document.body.prepend(header);
}

// 3Ô∏è‚É£ Funci√≥n para insertar el FOOTER en la p√°gina
function insertarFooter() {
  let footer = document.createElement("footer"); // Creamos el elemento <footer>

  // Aplicamos estilos al footer
  footer.style.background = "#222";
  footer.style.color = "white";
  footer.style.padding = "10px";
  footer.style.textAlign = "center";
  footer.style.position = "fixed"; // Fijamos el footer abajo
  footer.style.bottom = "0";
  footer.style.width = "100%";

  // Agregamos el contenido al footer
  footer.innerHTML = `<p>&copy; 2025 - Todos los derechos reservados</p>`;

  // Insertamos el footer al final del <body>
  document.body.appendChild(footer);
}

// 4Ô∏è‚É£ Funci√≥n para agregar eventos a los botones del header y permitir la navegaci√≥n
function agregarEventosDeNavegacion() {
  document.getElementById("btnInicio").addEventListener("click", function () {
    navegarA("index.html");
  });
  document.getElementById("btnPagina2").addEventListener("click", function () {
    navegarA("pagina2.html");
  });
  document.getElementById("btnPagina3").addEventListener("click", function () {
    navegarA("pagina3.html");
  });
}

// 5Ô∏è‚É£ Funci√≥n para navegar entre p√°ginas usando el BOM (Browser Object Model)
function navegarA(pagina) {
  window.location.href = pagina; // Cambiamos la ubicaci√≥n de la ventana actual
}